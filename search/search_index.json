{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#about","title":"About","text":"<p>Documentation, Help Guide and Portfolio for OpenFOAM. Hosted on GitPages, built using MKDocs.</p>"},{"location":"CaseStudies/","title":"OpenFOAM","text":""},{"location":"CaseStudies/#case-studies","title":"Case Studies","text":""},{"location":"CaseStudies/#welcome-to-the-case-studies","title":"Welcome to the Case Studies","text":"<p>This section contains the case files and outputs of CFD workloads I have run using OpenFOAM. Files for anything from Tutorials will also be here.</p>"},{"location":"CaseStudies/Case_01/","title":"OpenFOAM","text":""},{"location":"CaseStudies/Case_01/#case_01","title":"Case_01","text":""},{"location":"CaseStudies/Case_01/#case-considering","title":"Case considering [\u2026]","text":"<p>Coming Soon</p>"},{"location":"Theory/","title":"OpenFOAM","text":""},{"location":"Theory/#theory","title":"Theory","text":""},{"location":"Theory/#welcome-to-the-cfd-theory-section","title":"Welcome to the CFD Theory Section","text":"<p>This section aims to explain the theory behind Fluid Dynamics and how it applies to Computational Fluid Dynamics (CFD)</p>"},{"location":"Theory/symbols/","title":"OpenFOAM","text":""},{"location":"Theory/symbols/#symbols","title":"Symbols","text":"<p>List of symbols that will be referenced in Theory,   Tutorials and Case Studies.</p>"},{"location":"Theory/symbols/#general-variables","title":"General Variables","text":"<p>\\(q, s\\) \\(~~~~~~~~~~~\\) Scalars  \\(\\mathbf{a}, \\mathbf{b}, \\mathbf{c}\\) \\(~~~~~~\\) Vectors  \\(\\mathbf{S}, \\mathbf{T}, \\mathbf{Y}\\) \\(~~~~\\) Tensors  \\(x, y, z\\) \\(~~~~~~~\\) Cartesian Coordinate System  \\(\\mathbf{I}\\) \\(~~~~~~~~~~~~~~~\\) Identity Tensor  \\(\\mathbf{\\Psi}\\) \\(~~~~~~~~~~~~~\\) General Parameter: scalar, vector or tensor </p>"},{"location":"Theory/symbols/#geometry-and-mesh","title":"Geometry and Mesh","text":"<p>\\(\\mathbf{C}\\) \\(~~~~~~\\) Cell Centre  \\(\\mathbf{C_f}\\) \\(~~~~~\\) Face Centre  \\(\\mathbf{n}\\) \\(~~~~~~~\\) Normal Vector of Unit Length  \\(\\mathbf{p}\\) \\(~~~~~~~\\) Point Location  \\(S\\) \\(~~~~~~~\\) Surface  \\(V\\) \\(~~~~~~~\\) Volume </p>"},{"location":"Theory/symbols/#numerical-methods","title":"Numerical Methods","text":"<p>\\([\\mathbf{A}]\\) \\(~~~~~~\\) Matrix of a Matrix Equation \\([\\mathbf{A}][\\mathbf{\\Psi}]=[\\mathbf{B}]\\) \\(\\mathbf{A}\\) \\(~~~~~~~~\\) Matrix of a Matrix Equation \\(\\mathbf{A} \\cdot \\mathbf{\\Psi}=\\mathbf{B}\\) \\(a_{i,j}\\) \\(~~~~~~\\) Matrix Coefficients for row \\(i\\) and column \\(j\\) \\([\\mathbf{b}]\\) \\(~~~~~~~\\) Source Vector of a Matrix Equation  \\(\\mathbf{b}\\) \\(~~~~~~~~~\\) Source Vector of a Matrix Equation, above  \\(c\\) \\(~~~~~~~~~~\\) Scalar Coefficients  MORE TO ADD</p>"},{"location":"Theory/symbols/#subscripts","title":"Subscripts","text":"<p>\\(b\\) \\(~~~~~~\\) Boundary Value/Gradient  \\(D\\) \\(~~~~~\\) Downwind Interpolation  \\(ex\\) \\(~~~~\\) Exact Solution  \\(f\\) \\(~~~~~~\\) Values at Faces  \\(L\\) \\(~~~~~~\\) Linear Interpolation, Lower Bound Value  \\(N\\) \\(~~~~~\\) Neighbour Cell  \\(P\\) \\(~~~~~~\\) Owner/Current Cell \\(U\\) \\(~~~~~~\\) Downwind Interpolation </p>"},{"location":"Theory/symbols/#superscripts","title":"Superscripts","text":"<p>\\(c\\) \\(~~~~~~\\) Current Stored Value  \\(n\\) \\(~~~~~~\\) New Value  \\(o\\) \\(~~~~~~\\) Old Time Level  \\(oo\\) \\(~~~~\\) Old-Old Time Level </p>"},{"location":"Theory/symbols/#dimensionless-numbers","title":"Dimensionless Numbers","text":"<p>\\(Co\\) \\(~~~~\\) Courant Number = \\((\\Delta t/{V})\\Sigma_f \\cdot \\phi^+\\) \\(Pe\\) \\(~~~~\\) Peclet Number = \\(\\phi_f~/ (|\\mathbf{S_f}|~\\alpha_f~C_{\\Delta})\\) </p>"},{"location":"Theory/symbols/#physical-quantities-si-units","title":"Physical Quantities (SI units)","text":"<p>\\(\\mathbf{b}\\) \\(~~~~\\) Body Force per Unit Mass \\((N \\cdot kg^{-1})\\)  MORE TO ADD</p>"},{"location":"Theory/symbols/#dimensionless-numbers_1","title":"Dimensionless Numbers","text":"<p>\\(Eu\\) \\(~~~~\\) Euler Number = \\(p_0~/U^2\\) \\(Fr\\) \\(~~~~\\) Froude Number = \\(U~/ \\sqrt{gL}\\) \\(Kn\\) \\(~~~\\) Knudsen Number = \\(\\lambda~/ L\\) \\(Ma\\) \\(~~~\\) Mach Number = \\(|\\mathbf{u}|~/c\\) \\(Pe\\) \\(~~~~\\) Peclet Number = \\(U L~/ \\alpha\\) \\(Pr\\) \\(~~~~\\) Prandtl Number = \\(\\nu~/\\alpha\\) \\(Re\\) \\(~~~~\\) Reynolds Number = \\(U L~/ \\nu\\) \\(Re_\\tau\\) \\(~~~\\) Turbulent Reynolds Number = \\(k^2~/ \\epsilon\\nu\\) \\(Sc\\) \\(~~~~\\) Schidt Number = \\(\\nu~/D\\) \\(Sr\\) \\(~~~~\\) Strouhal Number = \\(L~/(\\mathcal{T} U)\\) </p>"},{"location":"Theory/symbols/#relational-symbols","title":"Relational Symbols","text":"<p>\\(a=b\\) \\(~~~~\\) \\(a\\) and \\(b\\) are equal \\(a \\approx b\\) \\(~~~~\\) \\(a\\) and \\(b\\) are approximately equal \\(a \\simeq b\\) \\(~~~~\\) \\(a\\) and \\(b\\) are almost exactly equal \\(a \\equiv b\\) \\(~~~~\\) \\(a\\) and \\(b\\) are equivalent \\(a:=b\\) \\(~~~\\) \\(a\\) is assigned the value of \\(b\\) \\(a \\propto b\\) \\(~~~~\\) \\(a\\) is proportional to \\(b\\) \\(a \\sim b\\) \\(~~~~\\) \\(a\\) is of the order of magnitude of \\(b\\)</p>"},{"location":"Theory/symbols/#credits","title":"Credits","text":"<p>Weller, H. Greenshields C. (2022) Notes on Computational Fluid Dynamics: General Principles. Available at: CFD Direct, Notes on CFD (Accessed: 09 January 2025)</p>"},{"location":"Tutorials/","title":"OpenFOAM","text":""},{"location":"Tutorials/#tutorials","title":"Tutorials","text":""},{"location":"Tutorials/#welcome-to-the-openfoam-tutorials-section","title":"Welcome to the OpenFOAM Tutorials Section","text":"<p>This section is essentially my docs and help guide for OpenFOAM, aimed at making getting into CFD and Linux as smoothly and pleasantly as possible (T&amp;C\u2019s Apply)</p>"},{"location":"Tutorials/Ch1_Intro/","title":"OpenFOAM","text":""},{"location":"Tutorials/Ch1_Intro/#introduction","title":"Introduction","text":"<p>What is OpenFOAM, how to get the most out of your workflow and the plan going forwards.</p>"},{"location":"Tutorials/Ch1_Intro/#what-is-openfoam","title":"What is OpenFOAM","text":"<p>Open Source Field Operation And Manipulation.</p> <p>OpenFOAM is a C++ library used to create and develop executables called applications. These applications fall into two categories: </p><pre><code>flowchart LR\n    A(Applications) --&gt; B(Solvers);\n    A --&gt; C(Utilities)</code></pre> Solvers are designed to solve a specific problem in continuum mechanics, OpenFOAM does not have one generic solver applicable to all cases. Instead, a specific solver must be chosen for a class of problems to solve. Each solver has a unique and descriptive name. For some, namely incompressible solvers, it reflects the algorithm, eg. <code>simpleFoam</code> uses the SIMPLE algorithm, <code>pimpleFoam</code> uses the PIMPLE algorithm. More often the name reflects the physical models or type of problem it is designed to solve, eg. <code>icoFoam</code>, <code>simpleFoam</code>, <code>sonicFoam</code>. A list of all current solvers is available here.  <p>Solvers that come packaged with OpenFOAM are in the <code>$FOAM_SOLVERS</code> directory, quickly accessed by typing <code>app</code> at the command line. This directory is subdivided into several directories categorized by continuum mechanics.</p> <p>Utilities are designed to perform tasks involving data manipulation. Once again, the names are descriptive. And a list of all current utilities is available here.</p> <p>Utilities that come packaged with OpenFOAM are in the <code>$FOAM_SUTILITIES</code> directory, quickly accessed by typing <code>util</code> at the command line. This directory is subdivided into several directories categorized loosely by worflow tasks.</p> <p>All of that being said, it is more or less CFD on hard mode, but at the same time it is not a CFD solver. It is the solver.</p>"},{"location":"Tutorials/Ch1_Intro/#the-workflow","title":"The Workflow","text":"<p>CFD workflows in OpenFOAM, and by extension other CFD softwares, follow the general steps below; </p><pre><code>flowchart LR\n    A(Case Setup) --&gt; B(Pre-process) --&gt; C(Process) --&gt; D(Post-process)</code></pre>"},{"location":"Tutorials/Ch1_Intro/#the-plan-going-forwards","title":"The plan going forwards","text":"<p>Chapter 2 will cover the file structure of OpenFOAM and its cases along with syntax and file format requirements.</p> <p>Chapter 3 covers running OpenFOAM applications for serial and parallel operations.</p> <p>Chapter 4 covers Mesh generation using OpenFOAM utilities and conversion of mesh data generated by external software, ie. Blender.</p> <p>Chapter 5 provides details on the models provided by OpenFOAM, boundary conditions, thermophysical and turbulence models.</p> <p>Chapter 6 focuses on solving OpenFOAM cases, descriptions of numerical schemes, case control and solution monitoring.</p> <p>Chapter 7 deals with Post-processing.</p> <p>Reference lists for the available solvers, utilities, libraires and boundary conditions are available on the OpenFOAM website under appendix A.</p>"},{"location":"Tutorials/Ch1_Intro/#credits","title":"Credits","text":"<p>OpenCFD Ltd (2025) OpenFOAM. Available at: OpenFOAM (Accessed: 12 January 2025)</p> <p>Many elements of this doc will be taken from the source above. Thus, this citation applies to the entirety of this doc.</p>"},{"location":"Tutorials/Ch2_FOAMCases/","title":"OpenFOAM","text":""},{"location":"Tutorials/Ch2_FOAMCases/#openfoam-cases","title":"OpenFOAM Cases","text":"<p>In this chapter we will look at the file structure and organisation of OpenFOAM cases.</p> <p>Normally, the name assigned to the case becomes the name of the directory in which all the case files and subdirectories are stored.</p> <p>The case directories themselves can be located anywhere. But, if they are within a <code>run</code> subdirectory of the project directory, eg.<code>$HOME/OpenFOAM/$[USER]-vXXXX/run</code>, and since the <code>$FOAM_RUN</code> environment variable is set to this PATH by default; we can quickly move to that directory by executing a preset alias, <code>run</code>, at the command line.</p>"},{"location":"Tutorials/Ch2_FOAMCases/#file-structure-of-openfoam-cases","title":"File Structure of OpenFOAM cases","text":"<p>The most basic directory structure for an OpenFOAM case: </p><pre><code>flowchart TD\n    A(case) --&gt; B(system);\n    A --&gt; C(constant);\n    A --&gt; D(time directories);\n    B --&gt; controlDict --&gt; fvSchemes --&gt; fvSolutions --&gt; blockMeshDict;\n    C --&gt; xProperties;\n    C --&gt; E(polyMesh) --&gt; boundary --&gt; faces --&gt; neighbour --&gt; owner --&gt; points;</code></pre>"},{"location":"Tutorials/Ch2_FOAMCases/#a-system-directory","title":"A system directory","text":"<p>For setting parameters associated with the solution procedure itself. It contains at least the following 3 files: <code>controlDict</code> where run control parameters are set including start/end time, time step and parameters for data output; <code>fvSchemes</code> where discretisation schemes used in the solution may be selected at run-time; and, <code>fvSolution</code> where the equation solvers, tolerances and other algorithm controls are set for the run.</p>"},{"location":"Tutorials/Ch2_FOAMCases/#a-constant-directory","title":"A constant directory","text":"<p>Contains a full description of the case mesh in a subdirectory <code>polyMesh</code> and files specifying physical properties for the application concerned, eg. <code>transportProperties</code>.</p>"},{"location":"Tutorials/Ch2_FOAMCases/#a-time-directory","title":"A time directory","text":"<p>Containing individual files of data for particular fields. The data can be: either, initial values and boundary conditions that the user must specify to define the problem; or, results written to a file by OpenFOAM. The name of each time directory is based on the simulated time at which the data is written. </p> <p>The OpenFOAM fields must always be initialised, even when the solution does not strictly require it, as in steady-state problems.</p> <p>It is sufficient to say now that since we usually start our simulations at time t = 0 , the initial conditions are usually stored in a directory named 0 or 0.000000e+00, depending on the name format specified. For example, in the cavity tutorial, the velocity field \\(\\textbf{U}\\) and pressure field \\(p\\) are initialised from files <code>.../0/U</code> and <code>.../0/p</code> respectively.</p>"},{"location":"Tutorials/Ch2_FOAMCases/#basic-io-file-format","title":"Basic I/O file format","text":"<p>OpenFOAM needs to read a range of data structures such as strings, scalars, vectors, tensors/matricies, lists and fields. The input/output (I/O) format of files is designed to be extremely flexible to enable the modifying the I/O in OpenFOAM applications as easily as possible. </p> <p>The I/O follows a simple set of rules that make the files extremely intuitive to understand.</p>"},{"location":"Tutorials/Ch2_FOAMCases/#general-syntax-rules","title":"General syntax rules","text":"<p>The format follows some of the general principles of OpenFOAM\u2019s C++ source code.</p> <ol> <li>Files have a free form. Columns have no meaning assigned to them and continuation across lines needs no indication.</li> <li>Lines have no particular meaning, except that <code>//</code> makes OpenFOAM ignore any text that follows it until the end of the line.</li> <li>A comment over multiple lines is done my eclosing text between <code>/*</code> and <code>*/</code>.</li> </ol> <p><code>//</code>, <code>/*</code> and <code>*/</code> are called Delimiters</p>"},{"location":"Tutorials/Ch2_FOAMCases/#dictionaries","title":"Dictionaries","text":"<p>OpenFOAM uses dictionaries as the most common way of specifying data.</p> <p>A Dictionary/Dict is a data structure that contains a set of data entries that can be retrieved by the I/O by specifying the keyword.</p> <p>The keyword entries follow the general format: </p><pre><code>&lt;keyword&gt;  &lt;dataEntry1&gt; ... &lt;dataEntryN&gt;;\n</code></pre> <p>Most entries, however, are single data entries: </p><pre><code>&lt;keyword&gt;  &lt;dataEntry&gt;;\n</code></pre> <p>Most OpenFOAM data files are dictionaries themselves. The format for a dictionary, in this case, is to specify the dictionary name followed the entries enclosed in curly braces {} as follows: </p><pre><code>&lt;dictionaryName&gt;\n{\n    ... keyword entries ...\n}\n</code></pre> <p>Dictionaries provide the means for organising entries into logical categories and can be specified hierarchically so that any dictionary can itself contain one or more dictionary entries.</p>"},{"location":"Tutorials/Ch2_FOAMCases/#the-data-file-header","title":"The data file header","text":"<p>All data files read and written by OpenFOAM begin with a dictionary named <code>FoamFile</code> containing a standard set of keyword entries:</p> Keyword Description Entry <code>version</code> I/O format version <code>2.0</code> <code>format</code> Data format <code>ascii</code>/<code>binary</code> <code>location</code> PATH to the file, in \u201c\u2026\u201d (optional) <code>class</code> OpenFOAM class constructed from the concerned data file typicaly <code>dictionary</code> or a field, eg. <code>volVectorField</code> <code>object</code> Filename eg. <code>controlDict</code> <p>The <code>class</code> entry is the name of the C++ class in the OpenFOAM library that will be constructed from the data in the file. Without knowledge of the underlying code which calls the file to be read, and knowledge of the OpenFOAM classes, the user will probably be unable to surmise the <code>class</code> entry correctly. However, most data files with simple keyword entries are read into an internal dictionary class and therefore the <code>class</code> entry is <code>dictionary</code> in those cases.</p> <p>The extract, below, from an <code>fvSolution</code> dictionary file, contains 2 dictionaries, <code>solvers</code> and <code>PISO</code>.</p> <pre><code>17\n18solvers\n19{\n20    p\n21    {\n22        solver          PCG;\n23        preconditioner  DIC;\n24        tolerance       1e-06;\n25        relTol          0.05;\n26    }\n27\n28    pFinal\n29    {\n30        $p;\n31        relTol          0;\n32    }\n33\n34    U\n35    {\n36        solver          smoothSolver;\n37        smoother        symGaussSeidel;\n38        tolerance       1e-05;\n39        relTol          0;\n40    }\n41}\n42\n43PISO\n44{\n45    nCorrectors     2;\n46    nNonOrthogonalCorrectors 0;\n47    pRefCell        0;\n48    pRefValue       0;\n49}\n50\n51\n52// ************************************************************************* //\n</code></pre> <p>The <code>solvers</code> dictionary contains multiple data entries for the solver to be used and tolerances for each of the pressure and velocity equations, represented by the <code>p</code> and <code>U</code> keywords respectively. The <code>PISO</code> dictionary contains algorithm controls.</p> <p>The PISO algorithm (Pressure Implicit with Splitting of Operators) is an efficient method to solve the Navier-Stokes equations in unsteady problems.</p>"},{"location":"Tutorials/Ch2_FOAMCases/#lists","title":"Lists","text":"<p>OpenFOAM applications contain lists, eg. a list of vertex coordinates for a mesh description. Lists are commonly found in I/O and have a format of their own in which the entries are contained within parentheses ( ). </p> <p>There is also a choice of format preceeding the parentheses:</p> SimpleNumberedToken Identifier <p>The keyword is followed immediately by parentheses; </p><pre><code>&lt;listName&gt;\n(\n    ... entries ...\n);\n</code></pre> <p>The keyword is followed by the number of elements <code>&lt;n&gt;</code> in the list; </p><pre><code>&lt;listName&gt;\n&lt;n&gt;\n(\n    ... entries ...\n);\n</code></pre> <p>The keyword is followed by a class name identifier label <code>&lt;type&gt;</code>. Where, <code>&lt;type&gt;</code> states what the list contains; </p><pre><code>&lt;listName&gt;\nList&lt;scalar&gt;\n&lt;n&gt;         //optional\n(\n    ... entries ...\n);\n</code></pre> <p><code>&lt;scalar&gt;</code> in <code>List&lt;scalar&gt;</code> is not a generic name but the actual text that should be entered.</p> <p>This example is for a list of <code>scalar</code> elements, for a list of <code>vector</code> elements use <code>List&lt;vector&gt;</code></p> <p>The simple format is a convenient way of writing a list. The other formats allow the code to read the data faster since the size of the list can be allocated to memory in advance of reading the data.</p> <p>The simple format is therefore preferred for short lists, where read time is minimal, and the other formats are preferred for long lists.</p>"},{"location":"Tutorials/Ch2_FOAMCases/#scalars-vectors-and-tensors","title":"Scalars, Vectors and Tensors","text":"ScalarsVectorsTensor <p>A scalar is a single number represented as suck in a data file.</p> <p>A vector is a VectorSpace of rank 1 and dimension 3. A vector is written; </p><pre><code>(1.0 1.1 1.2)\n</code></pre> <p>Since the number of elements in a vector is always fixed to 3, the simple List format is used.</p> <p>A tensor is a VectorSpace of rank 2 and dimension 3, therefore data entries are always fixed to 9 real numbers. The identity tensor can be written as; </p><pre><code>(\n    1 0 0\n    0 1 0\n    0 0 1\n)\n</code></pre> <p>A Tensor is just a Matrix.</p> <p>Since most studies will be in 3D, our tensor is 3x3. In the case that a study is 2D, our 3D identity tensor simply becomes;</p> <pre><code>(\n    1 0 0\n    0 1 0\n    0 0 0\n)\n</code></pre> <p>A VectorSpace is a set whose elements, vectors, can be added together and multiplied, scaled, by scalars. The dimension of a VectorSpace is the number of vectors in any basis for the space to be spanned, represents the \u20183\u2019 in \u20183D\u2019. The rank is the dimension of the column space.</p>"},{"location":"Tutorials/Ch2_FOAMCases/#dimensional-units","title":"Dimensional Units","text":"<p>In contiuum  mechanics, properties are represented in some chosen units. Algebraic operations must be performed on these properties using consistent units of measurement; in particular, addition, subtraction and equality are only physically meaningful for properties of the same dimensional units. As a safeguard against implementing a meaningless operation, OpenFOAM attaches dimensions to field data and physical properties and performs dimension checking on any tensor operation.</p> <p>The I/O format for a dimensionSet is 7 scalars delimited by square brackets; </p><pre><code>[0 2 -1 0 0 0 0]\n</code></pre> <p>Where each of the values in the dimensionSet correspond to the power of each of the base units of measurements;</p> No. Property SI Unit 1 Mass kilogram (kg) 2 Length metre (m) 3 Time second (s) 4 Temperature Kelvin (K) 5 Quantity kilogram-mole (kgmol) 6 Current ampere (A) 7 Luminous Intensity candela (cd) <p>We can now see that <code>[0 2 -1 0 0 0 0]</code> corresponds to \\(m s^{-1}\\) (velocity).</p>"},{"location":"Tutorials/Ch2_FOAMCases/#dimensioned-types","title":"Dimensioned Types","text":"<p>Physical properties are typically specified with their associated dimensions. These entries have the format that the following example of a dimensionedScalar demonstrates: </p><pre><code>nu          [0 2 -1 0 0 0 0]  1;\n</code></pre> <p><code>nu</code> is the keyword; the next entry is the dimensionSet; the final entry is the scalar value</p>"},{"location":"Tutorials/Ch2_FOAMCases/#fields","title":"Fields","text":"<p>Much of the I/O data in OpenFOAM are tensor fields that are read from and written into the time directories. OpenFOAM writes field data using keyword entries;</p> Keyword Description Example <code>dimensions</code> Dimensions of field <code>[1 1 -2 0 0 0 0]</code> <code>internalField</code> Value of internal field <code>uniform (1 0 0)</code> <code>boundaryField</code> Boundary Field see note below <p>The <code>boundaryField</code> is a dictionary containing a set of entries whose names correspond to each of the names of the boundary patches listed in the boundary file in the <code>polyMesh</code> directory. Each patch entry is itself a dictionary containing a list of keyword entries. The compulsory entry, <code>type</code>, describes the patch field condition specified for the field. The remaining entries correspond to the type of patch field condition selected and can typically include field data specifying initial conditions on patch faces (covered later)</p> <p>The data begins with an entry for its <code>dimensions</code>. Following that, is the <code>internalField</code>, described in one of two ways;</p> Uniform FieldNon-Uniform Field <p>A single value is assigned to all elements within the field;\u201d     </p><pre><code>internalField uniform &lt;entry&gt;;\n</code></pre> <p>Each field element is assigned a unique value from a list;     </p><pre><code>internalField nonuniform &lt;List&gt;;\n</code></pre> <p>The Token Identifier form of List is recommended</p> <p>An example set of field dictionary entries for velocity <code>U</code> are below:</p> <pre><code>17dimensions      [0 1 -1 0 0 0 0];\n18\n19internalField   uniform (0 0 0);\n20\n21boundaryField\n22{\n23    movingWall\n24    {\n25        type            fixedValue;\n26        value           uniform (1 0 0);\n27    }\n28\n29    fixedWalls\n30    {\n31        type            noSlip;\n32    }\n33\n34    frontAndBack\n35    {\n36        type            empty;\n37    }\n38}\n39\n40// ************************************************************************* //\n</code></pre>"},{"location":"Tutorials/Ch2_FOAMCases/#directives-and-macro-substitutions","title":"Directives and Macro Substitutions","text":"<p>There is additional file syntax that offers great flexibility for the setting up of OpenFOAM case files, namely directives and macro substitutions.</p> DirectivesMacro Substitutions <p>Directives are commands that can be contained within case files that begin with the hash (#) symbol. </p> <p>Macro substitutions begin with the dollar ($) symbol.</p> <p>At present there are 4 directive commands available:</p> #include#inputMode#remove#codeStream <p>Reads the file of name <code>&lt;fileName&gt;</code> </p><pre><code>#include \"&lt;fileName&gt;\"\n//or\n#includeIfPresent \"&lt;fileName&gt;\"\n</code></pre> <p>Has the following options: </p><pre><code>#default\n//provide default value if entry is not already defined\n\n#overwrite\n//silently overwrites existing entries\n\n#warn\n//warn about duplicate entries\n\n#error\n//error if any duplicate entries occur\n\n#merge\n//merge sub-directories when possible (the default mode)\n</code></pre> <p>Removes any included keyword entry; takes either a word or regular expression </p><pre><code>#remove &lt;keywordEntry&gt;\n</code></pre> <p>Followed by verbatim C++ code, compiles, loads and executes the code on-the-fly to generate the entry.</p>"},{"location":"Tutorials/Ch2_FOAMCases/#the-include-and-inputmode-directives","title":"The #include and #inputMode Directives","text":"<p>For example, let us say we wish to set an initial value of pressure once to be used as the internal field and initial value at a boundary. We could create a file, <code>initialConditions</code>, which contains the following entries: </p><pre><code>pressure 1e+05;\n#inputMode merge\n</code></pre> In order to use this pressure for both the internal and initial boundary fields, we would simply include the following macro substitutions in the pressure field file <code>p</code>: <pre><code>#include \"initialConditions\"\ninternalField uniform $pressure;\nboundaryField\n{\n    patch1\n    {\n        type fixedValue;\n        value $internalField;\n    }\n}\n</code></pre> <p>This is a fairly trivial example that simply demonstrates how this functionality works. However, the functionality can be used in many, more powerful ways particularly as a means of generalising case data to suit our needs. For example, if we have a set of cases that require the same RAS turbulence model settings, a single file can be created with those settings which is simply included in the <code>turbulenceProperties</code> file of each case. Macro substitutions can extend well beyond a single value so that, for example, sets of boundary conditions can be predefined and called by a single macro. The extent to which such functionality can be used is almost endless.</p>"},{"location":"Tutorials/Ch2_FOAMCases/#the-codestream-directive","title":"The #codeStream Directive","text":"<p>The <code>#codeStream</code> directive takes C++ code which is compiled and executed to deliver the dictionary entry. The code and compilation instructions are specified through the following keywords:</p> <ol> <li> <p><code>code</code>: specifies the code, called with arguments <code>OStream&amp; os</code> and <code>const dictionary&amp; dict</code> which the user can use in the code, eg. to lookup keyword entries from within the current case dictionary (file).</p> </li> <li> <p><code>codeInclude</code> (optional): specifies additional C++ <code>#include</code> statements to include OpenFOAM files.</p> </li> <li> <p><code>codeOptions</code> (optional): specifies any extra compilation flags to be added to <code>EXE_INC</code> in Make/options.</p> </li> <li> <p><code>codeLibs</code> (optional): specifies any extra compilation flags to be added to <code>LIB_LIBS</code> in Make/options.</p> </li> </ol> <p>Code, like any string, can be written across multiple lines by enclosing it within hash-bracket delimiters,#{ \u2026 #}. Anything in between these delimiters becomes a string with all newlines, quotes, etc. preserved.</p> <p>An example of #<code>codeStream</code> is given below. The code in the <code>controlDict</code> file looks up dictionary entries and does a simple calculation for the write interval:</p> <pre><code>startTime       0;\nendTime         100;\n...\nwriteInterval   #codeStream\n{\n    code\n    #{\n        scalar start = readScalar(dict.lookup(\"startTime\"));\n        scalar end = readScalar(dict.lookup(\"endTime\"));\n        label nDumps = 5;\n        os &lt;&lt; ((end - start)/nDumps);\n    #};\n};\n</code></pre>"},{"location":"Tutorials/admonitions/","title":"OpenFOAM","text":""},{"location":"Tutorials/admonitions/#admonitions","title":"Admonitions","text":"<p>List of the admonitions that will be called out in Tutorials and Case Studies.</p> <p>Warnings, pay careful attention to these.</p> <p>Dangers, AVOID THIS UNDER ANY CIRCUMSTANCE. There will hopefully be very few instances.</p> <p>Tips, following these may or may not streamlines your workflow.</p> <p>Notes, these serve as reminders/notes.</p> <p>Examples, where I will try really really hard to explain tricky content using an analogy.</p> <p>Contain codeblock/outputs of expected Success. Well done you\u2019re competant, yaay....</p> <p>Contain codeblock/outputs of Failures. Most of these will come from GitHub Issues. Well done you\u2019re competant</p> <p>Values that will be used in the solve.</p>"},{"location":"Tutorials/install/","title":"OpenFOAM","text":""},{"location":"Tutorials/install/#installation","title":"Installation","text":"<p>A step-by-step walkthrough on installing OpenFOAM.</p>"},{"location":"Tutorials/install/#openfoam-installation","title":"OpenFOAM Installation","text":"<p>OpenFOAM is available to install on MS-Windows, Linux and MacOS.</p>"},{"location":"Tutorials/install/#windows","title":"Windows","text":"<p>There are three different ways to run OpenFOAM on MS-Windows (10 or newer). In their order of preference:</p> <ol> <li> <p>WSL/WSL2: Windows Subsystem Linux</p> <p>\u2013 Many OpenFOAM users prefer using WSL.</p> <p>\u2013 Provides maximum flexibilty.</p> <p>\u2013 The OpenFOAM Linux packages are kept more up-to-date than cross-compiled/Docker variants.</p> </li> <li> <p>Native Windows: Cross-compiled Windows binaries (mingw)</p> <p>\u2013 Quick way to use OpenFOAM on Windows.</p> <p>\u2013 Does not currently include an OpenFOAM development environment.</p> </li> <li> <p>Docker Containers: docker-windows</p> <p>\u2013 Equivilant to the WSL/WSL2 approach.</p> <p>\u2013 The entire OpenFOAM installation/workspace is managed as a container.</p> </li> </ol> <p>Pick only one method</p> WSL/WSL2Native WindowsDocker Containers <ol> <li>Install WSL/WSL2: The WSL information from Windows provides installation anf configuration information for WSL.</li> <li> <p>Choose and install a Linux Distro: Choose a distro such as Ubuntu or openSUSE that recieves regualar OpenFOAM updates.</p> <p>For new users I recommend using Ubuntu here</p> </li> <li> <p>Install OpenFOAM: Follow the regular installation/update instructions for Ubuntu or  openSUSE</p> </li> </ol> <p>OpenFOAM requires a case sensitive file system to build. If you build OpenFOAM from a location outside of the WSL/WSL2 partition (eg. a mounted drive, <code>/mnt/c/Users/some/path</code>) this will cause issues. There are two possible solutions to deal with this.</p> Build in the partitionCreate a case sensitive folder <p>\u2013 Build OpenFOAM within the WSL/WSL2 partition. This partition is case sensitive.</p> <p>Create a  case sensitive folder within the Windows Partition and build OpenFOAM there. As outlined below:</p> <ol> <li>Create a new folder within Windows (eg, <code>../Documents/OpenFOAM</code>). Folder must be empty for the nest step.</li> <li>Enable case sensitivity for this folder using <code>fsutil.exe</code>. This is done by running <code>fsutil.exe file setCaseSensitiveInfo &lt;path/to/folder&gt; enable</code> in an elevated PowerShell session.</li> <li>From inside the WSL/WSL2 environment/terminal, unpack the OpenFOAM-vXXXX.tgz/ThirdParty-vXXXX.tgz files or clone the Git Repos within this folder.</li> <li>Build OpenFOAM.</li> </ol> <p>Tested by [ Denis ]</p> <ol> <li> <p>Download the package of the latest OpenFOAM MinGW version:</p> <p>\u2013 This package is an executable</p> <p>\u2013 Run this to open the installation wizard, and follow the instructions.</p> </li> <li> <p>If needed, install  Microsoft MPI (MS-MPI)</p> </li> <li> <p>Upon completion, an icon will be created on the Desktop:</p> <p>\u2013 Click this icon to launch a terminal window.</p> <p>\u2013 Running this will load the OpenFOAM Environment.</p> <p>\u2013 Verify the contents of OpenFOAM in a terminal:     </p><pre><code>$ ls -p\nOpenFOAM/\n\n$ cd $WM_PROJECT_DIR\n\n$ ls -p\nbin/  COPYING  etc/  etc-mingw  META-INFO  platforms/  README.md  ThirdParty/  tutorials/\n</code></pre> </li> </ol> <p><code>$</code> is the command prompt, indicating the terminal is ready to accept a command</p> <ol> <li>Install Docker: Follow the  Docker manual</li> <li>Create the OpenFOAM container: Follow the  OpenFOAM + Docker instructions</li> </ol> <p>There is no need to use any of these methods to download Paraview, use the Windows version of ParaView</p>"},{"location":"Tutorials/install/#linux","title":"Linux","text":"<p>Linux is the recommended OS for OpenFOAM. There is a slightly steep learning curve, since nearly everything revolves around using a terminal.</p> <p>When it comes to the distros, Ubuntu and openSUSE generally are updated first:</p> <p>\u2013 Ubuntu is very popular and recommended by OpenFOAM users.</p> <p>\u2013 openSUSE is the favoured development platform for OpenFOAM.</p> <p>I recommend using Ubuntu</p> Ubuntu + DebianopenSUSE <ol> <li> <p>Use the precompiled packages: </p><pre><code># Add the repository\ncurl https://dl.openfoam.com/add-debian-repo.sh | sudo bash\n\n# Update the repository information\nsudo apt-get update\n\n# Install preferred package. Eg, OpenFOAM v2412 is the latest package at the time of writing.\n# Options other than -default are explained below\nsudo apt-get install openfoam2412-default\n\n# Use the openfoam shell session. Eg,\nopenfoam2412\n</code></pre> User Group What to install Runtime Compilation Tutorials minimalist <code>-base</code> yes no no traditional <code>-base-dev (devel)</code> yes yes no everything <code>-default</code> yes yes yes <p>Note</p> <ul> <li>The system installation prefix <code>/usr/lib/openfoam/openfoamXXXX</code> is where individual versions are located.</li> <li>The OpenFOAM bash session wrapper is created under <code>/usr/bin/openfoamXXXX</code></li> </ul> </li> </ol> <ol> <li> <p>Use the precompiled packages:     </p><pre><code># Add the science repository\ncurl https://dl.openfoam.com/add-science-repo.sh | sudo bash\n\n# Refresh\nsudo zypper refresh\n\n# Install preferred package. Eg, OpenFOAM v2412 is the latest package at the time of writing.\n# Options other than -default are explained below\nsudo zypper install openfoam2412-default\n\n# Use the openfoam shell session. Eg,\nopenfoam2412\n</code></pre> User Group What to install Runtime Compilation Tutorials minimalist <code>-base</code> yes no no traditional <code>-devel</code> yes yes no everything <code>-default</code> yes yes yes </li> </ol> <p>ParaView will need to be installed seperately;</p> Ubuntu + DebianopenSUSE <p>Run the following </p><pre><code># Update the repository information\nsudo apt-get update\n\n# Install Paraview (latest)\nsudo apt install paraview -y\n</code></pre> <p>Run the following </p><pre><code># Refresh\nsudo zypper refresh\n\n# Install Paraview (latest)\nsudo zypper install paraview -y\n</code></pre> <p>The <code>-y</code> option will auto-answer yes to any prompts asking for confirmation</p>"},{"location":"Tutorials/install/#macos","title":"MacOS","text":"<p>[Entry coming soon]</p>"},{"location":"Tutorials/quickstart/","title":"OpenFOAM","text":""},{"location":"Tutorials/quickstart/#quick-start","title":"Quick Start","text":"<p>A simplified step-by-step overview to quickly get OpenFOAM up and running.</p>"},{"location":"Tutorials/quickstart/#openfoam-installation","title":"OpenFOAM Installation","text":""},{"location":"Tutorials/quickstart/#workflow","title":"Workflow","text":"<p>CFD workflows in OpenFOAM, and by extension other CFD softwares, follow the steps below; </p><pre><code>flowchart LR\n    A(Problem Setup) --&gt; B(Pre-process) --&gt; C(Process) --&gt; D(Post-process)</code></pre>"},{"location":"Tutorials/quickstart/#problem-setup","title":"Problem Setup","text":"<p>In OpenFOAM, simulation settings are modified via text files. Each parameter follows a straightforward key-value pairing format. Each file has its own unique set of mandatory and optional keywords. Location and Content of these files vary depending on the chosen solver application, simulation setup and what aspects you wish to modify.</p> <p>It is necessary to familiarize yourself with the structure and significance of these keywords in relevant files</p> <p>You can browse the problem setup:</p> File ExplorerWindowsLinux <p>Navigate to where the main file was stored.</p> <pre><code>$ cd $FOAM_TUTORIALS/incompressible/simpleFoam/pitzDaily/\n\n$ ls -p\n0/  constant/  system/\n\n$ ls -p system/\nblockMeshDict  controlDict  fvSchemes  fvSolution  streamlines\n\n$ ls -p constant/\ntransportProperties  turbulenceProperties\n\n$ ls -p 0/\nepsilon  k  p  U\n</code></pre> <pre><code>TEST ON LINUX THEN ADD\n</code></pre>"},{"location":"Tutorials/quickstart/#pre-process","title":"Pre-process","text":""}]}